#!/usr/bin/env python3
"""
Webhook —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ø–ª–æ—è Catty Reminders.
"""

import sys
import json
import subprocess
import os
from http.server import HTTPServer, BaseHTTPRequestHandler
from datetime import datetime
from pathlib import Path

PORT = 8080
APP_DIR = "/home/vboxuser/Desktop/DevOps/catty-reminders-app"
DEPLOY_SCRIPT = "/home/vboxuser/Desktop/DevOps/catty-reminders-app/deploy.sh"
VENV_PYTHON = os.path.join(APP_DIR, ".venv", "bin", "python")

class WebhookHandler(BaseHTTPRequestHandler):
    def log_message(self, format, *args):
        ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        print(f"üîî [{ts}] {format % args}")

    def _safe_write(self, b: bytes):
        try:
            self.wfile.write(b)
        except BrokenPipeError:
            return False
        return True

    def do_HEAD(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html; charset=utf-8")
        self.send_header("Connection", "close")
        self.end_headers()

    def do_GET(self):
        html = f"""
        <!doctype html>
        <html lang="ru">
        <head>
          <meta charset="utf-8">
          <meta name="viewport" content="width=device-width,initial-scale=1">
          <title>Catty Reminders ‚Äî Webhook</title>
          <style>
            body {{ font-family: Inter, Tahoma, Arial, sans-serif; max-width: 720px; margin: 40px auto; color: #222; }}
            header {{ display:flex; align-items:center; gap:12px; }}
            h1 {{ margin:0; font-size:1.4rem; }}
            .meta {{ color:#555; margin-top:8px; }}
            .box {{ background:#f7fafc; border:1px solid #e2e8f0; padding:16px; border-radius:8px; margin-top:16px; }}
            a.small {{ color:#2563eb; text-decoration:none; font-size:0.9rem; }}
          </style>
        </head>
        <body>
          <header>
            <div style="font-size:28px;">üöÄ</div>
            <div>
              <h1>Catty Reminders ‚Äî Webhook</h1>
              <div class="meta">–°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å GitHub webhook'—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ø–ª–æ—è.</div>
            </div>
          </header>

          <div class="box">
            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> –∞–∫—Ç–∏–≤–µ–Ω</p>
            <p><strong>–ü–æ—Ä—Ç:</strong> {PORT}</p>
            <p><strong>–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞:</strong> {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}</p>
            <p>–û—Ç–ø—Ä–∞–≤—å—Ç–µ POST-–∑–∞–ø—Ä–æ—Å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º <code>X-GitHub-Event: push</code>, —á—Ç–æ–±—ã –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –¥–µ–ø–ª–æ–π.</p>
            <p style="margin-top:12px;"><a class="small" href="https://github.com/prafdin/catty-reminders-app">–ò—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π</a></p>
          </div>
        </body>
        </html>
        """
        body = html.encode("utf-8")
        self.send_response(200)
        self.send_header("Content-type", "text/html; charset=utf-8")
        self.send_header("Content-Length", str(len(body)))
        self.send_header("Connection", "close")
        self.end_headers()
        self._safe_write(body)

    def do_POST(self):
        try:
            length = int(self.headers.get("Content-Length", 0))
            body = self.rfile.read(length) if length else b""
            print("‚Üí –ü–æ–ª—É—á–µ–Ω POST-–∑–∞–ø—Ä–æ—Å")
            print(f"   –†–∞–∑–º–µ—Ä —Ç–µ–ª–∞: {length} –±–∞–π—Ç")

            try:
                payload = json.loads(body.decode("utf-8")) if body else {}
            except json.JSONDecodeError as e:
                payload = {}
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: {e}")

            event = self.headers.get("X-GitHub-Event", "unknown")

            print(f"–°–æ–±—ã—Ç–∏–µ –æ—Ç GitHub: {event}")
            print(f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {payload.get('repository', {}).get('full_name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")

            if event == "push":
                self.handle_push(payload)
            else:
                print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —Ç–∏–ø–∞: {event}")

            self._ok()
        except Exception as e:
            print(f"‚ÄºÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ POST: {e}")
            self._err(500, str(e))

    def handle_push(self, payload):
        print("‚Üí –û–±—Ä–∞–±–æ—Ç–∫–∞ push-—Å–æ–±—ã—Ç–∏—è –Ω–∞—á–∞—Ç–∞")
        branch = payload.get("ref", "").replace("refs/heads/", "")
        commits = len(payload.get("commits", []))
        clone = payload.get("repository", {}).get("clone_url", "")
        print(f"   –í–µ—Ç–∫–∞: {branch or '<–Ω–µ —É–∫–∞–∑–∞–Ω–∞>'}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤: {commits}")
        print(f"   URL –¥–ª—è –∫–ª–æ–Ω–∞: {clone or '<–Ω–µ —É–∫–∞–∑–∞–Ω–∞>'}")

        if self.run_tests():
            self.run_deploy()
        else:
            print("‚úñ –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã ‚Äî –¥–µ–ø–ª–æ–π –æ—Ç–º–µ–Ω—ë–Ω")

    def run_tests(self):
        print("‚Üí –ó–∞–ø—É—Å–∫ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤")
        test_files = [
            ("Unit —Ç–µ—Å—Ç—ã", "test_unit.py"),
            ("API —Ç–µ—Å—Ç—ã", "test_api.py"),
        ]

        python_exec = VENV_PYTHON if Path(VENV_PYTHON).exists() else sys.executable
        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä Python: {python_exec}")

        env = os.environ.copy()
        env["PYTHONPATH"] = f"{APP_DIR}:{os.path.join(APP_DIR,'tests')}"
        env.setdefault("BASE_URL", "http://127.0.0.1:8181")

        all_ok = True
        for name, fname in test_files:
            path = os.path.join(APP_DIR, "tests", fname)
            if not os.path.exists(path):
                print(f"   ‚ö† –§–∞–π–ª –¥–ª—è {name} –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
                continue

            print(f"   ‚Üí –í—ã–ø–æ–ª–Ω—è–µ–º: {name}")
            try:
                cmd = [python_exec, "-m", "pytest", path, "-q", "-rA"]
                res = subprocess.run(
                    cmd,
                    cwd=APP_DIR,
                    capture_output=True,
                    text=True,
                    timeout=300,
                    env=env,
                )
                if res.returncode == 0:
                    print(f"   ‚úì {name}: –£—Å–ø–µ—à–Ω–æ")
                else:
                    print(f"   ‚úñ {name}: –ó–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –∫–æ–¥–æ–º {res.returncode}")
                    snippet = (res.stderr or res.stdout or "")[-4000:]
                    print(snippet)
                    all_ok = False
            except subprocess.TimeoutExpired:
                print(f"   ‚è∞ {name}: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
                all_ok = False
            except Exception as e:
                print(f"   üí• {name}: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ - {e}")
                all_ok = False

        return all_ok

    def run_deploy(self):
        print("‚Üí –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É –¥–µ–ø–ª–æ—è")
        if not os.path.exists(DEPLOY_SCRIPT):
            print(f"   ‚úñ –ù–µ –Ω–∞–π–¥–µ–Ω —Å–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è: {DEPLOY_SCRIPT}")
            return False

        try:
            res = subprocess.run(
                ["/bin/bash", DEPLOY_SCRIPT],
                capture_output=True,
                text=True,
                timeout=600,
            )
            if res.returncode == 0:
                print("‚úì –î–µ–ø–ª–æ–π –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                print("---- stdout –¥–µ–ø–ª–æ—è ----")
                print(res.stdout)
                print("---- stderr –¥–µ–ø–ª–æ—è ----")
                print(res.stderr)
                return True
            else:
                print("‚úñ –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–ø–ª–æ—è")
                print(f"   –ö–æ–¥ –≤—ã—Ö–æ–¥–∞: {res.returncode}")
                print("---- stdout –¥–µ–ø–ª–æ—è ----")
                print(res.stdout)
                print("---- stderr –¥–µ–ø–ª–æ—è ----")
                print(res.stderr)
                return False
        except subprocess.TimeoutExpired:
            print("‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–ø–ª–æ—è")
            return False
        except Exception as e:
            print(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ:{e}")
            return False

    def _ok(self):
        body = b'{"status":"success","message":"Webhook processed"}'
        self.send_response(200)
        self.send_header("Content-type", "application/json")
        self.send_header("Content-Length", str(len(body)))
        self.send_header("Connection", "close")
        self.end_headers()
        self._safe_write(body)

    def _err(self, code, msg):
        payload = json.dumps({"status": "error", "message": msg}).encode("utf-8")
        self.send_response(code)
        self.send_header("Content-type", "application/json")
        self.send_header("Content-Length", str(len(payload)))
        self.send_header("Connection", "close")
        self.end_headers()
        self._safe_write(payload)

def main():
    print("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞: Catty Reminders Webhook")
    print(f"–°–ª—É—à–∞–µ–º –ø–æ—Ä—Ç: {PORT}")
    print(f"–†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {APP_DIR}")
    print(f"–°–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è: {DEPLOY_SCRIPT}")
    print("–û–∂–∏–¥–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ webhook-–∑–∞–ø—Ä–æ—Å—ã...")
    server = HTTPServer(("0.0.0.0", PORT), WebhookHandler)
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        print("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
    finally:
        server.server_close()

if __name__ == "__main__":
    main()